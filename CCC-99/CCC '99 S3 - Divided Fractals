#include <bits/stdc++.h>

//recursively generate the Q fractals
//store the fractals in a 2D array of booleans
//true = filed ; false = unfilled
//print out the desired portion


using namespace std;
bool frac[250][250];
int Q,n,b,t,l,r;

void gen(int t, int b, int l ,int r)
{
	if ((r - l + 1) < 3)
		return;
	int unit = (r - l + 1) / 3;
	//remove center
	for (int row = t + unit; row <= b - unit; row++)
		for (int col = l + unit; col <= r - unit; col++)
			frac[row][col] = false;
	//remove the sub squares
	gen(t, b - 2 * (unit ), l, r - 2 * (unit ));
	gen(t, b - 2 * (unit ), l+1*(unit), r - 1 * (unit ));
	gen(t, b - 2 * (unit ), l + 2 * (unit ), r );

	gen(t+1*(unit ), b - 1 * (unit ), l, r - 2 * (unit ));
	
	gen(t + 1 * (unit ), b - 1 * (unit ), l + 2 * (unit ), r);

	gen(t + 2 * (unit ), b, l, r - 2 * (unit));
	gen(t + 2 * (unit ), b, l + 1 * (unit), r - 1 * (unit));
	gen(t + 2 * (unit ), b, l + 2 * (unit), r);


}

void printFull()
{
	for (int i = 1; i <= pow(3, n); i++) {
		for (int j = 1; j <= pow(3, n); j++) {
			if (frac[i][j]) cout << "* "; else cout << "  ";
		}
		cout << "\n";
	}
}

int main()
{
	cin >> Q;
	while (Q--)
	{
		cin >> n >> b >> t >> l >> r;
		memset(frac, true, sizeof(frac));//set all filled
		gen(1,pow(3,n),1,pow(3,n));
		t = pow(3, n) - t+1;
		b = pow(3, n) - b+1;
		
		//printFull();
		
		for (int i = t; i <= b; i++)
		{
			for (int j = l; j <= r; j++)
			{
				if (frac[i][j])
					cout << '*' << " ";
				else
					cout << ' ' << " ";
			}
			cout << "\n";
		}
		

	}
	return 0;
}
